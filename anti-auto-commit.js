import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Script para bloquear commits autom√°ticos
async function setupAntiAutoCommit() {
  console.log("üõ°Ô∏è Configurando prote√ß√£o contra commits autom√°ticos...");

  const hooksDir = ".git/hooks";
  const preCommitHook = path.join(hooksDir, "pre-commit");

  const hookContent = `#!/bin/sh
# Anti-Auto-Commit Protection
# Bloqueia commits autom√°ticos n√£o autorizados

# Verifica se √© um commit manual (tem vari√°vel de ambiente)
if [ -z "$MANUAL_COMMIT" ]; then
  echo "üö® COMMIT AUTOM√ÅTICO BLOQUEADO!"
  echo "Use: MANUAL_COMMIT=true git commit -m 'sua mensagem'"
  exit 1
fi

echo "‚úÖ Commit manual autorizado"
exit 0
`;

  try {
    // Cria o hook de pre-commit
    fs.writeFileSync(preCommitHook, hookContent);

    // Torna execut√°vel (no Windows isso pode n√£o ser necess√°rio)
    try {
      fs.chmodSync(preCommitHook, "755");
    } catch (e) {
      // Ignora erro de chmod no Windows
    }

    console.log("‚úÖ Hook de pre-commit criado!");
    console.log("üõ°Ô∏è Agora commits autom√°ticos ser√£o bloqueados");
    console.log("üìù Para fazer commits manuais, use:");
    console.log("   MANUAL_COMMIT=true git commit -m 'sua mensagem'");
  } catch (error) {
    console.error("‚ùå Erro ao criar hook:", error.message);
  }
}

// Executa se chamado diretamente
if (require.main === module) {
  setupAntiAutoCommit();
}

module.exports = { setupAntiAutoCommit };
